# {{package.name}}

{{#if package.description}}
**{{package.name}}:** {{package.description}}

{{/if}}
This project was bootstrapped by [create-neon](https://www.npmjs.com/package/create-neon).

## Building {{package.name}}

Building {{package.name}} requires a [supported version of Node and Rust](https://github.com/neon-bindings/neon#platform-support).

To run the build, run:

```sh
$ npm run build
```

This command uses the [@neon-rs/cli](https://github.com/neon-rs/cli) utility to assemble the binary Node addon from the output of `cargo`.

## Exploring {{package.name}}

After building {{package.name}}, you can explore its exports at the Node REPL:

```sh
$ npm run build
$ node
> require('.').hello()
"hello node"
```

## Available Scripts

In the project directory, you can run:

{{#unless package.isLibrary}}
### `npm install`

Installs the project, including running `npm run build`.

{{/unless}}
### `npm run build`

Builds the Node addon (`index.node`) from source, generating a release build with `cargo --release`.

Additional [`cargo build`](https://doc.rust-lang.org/cargo/commands/cargo-build.html) arguments may be passed to `npm run build` and similar commands. For example, to enable a [cargo feature](https://doc.rust-lang.org/cargo/reference/features.html):

```
npm run build -- --feature=beetle
```

#### `npm run debug`

Similar to `npm run build` but generates a debug build with `cargo`.

#### `npm run cross`

Similar to `npm run build` but uses [cross-rs](https://github.com/cross-rs/cross) to cross-compile for another platform. Use the [`CARGO_BUILD_TARGET`](https://doc.rust-lang.org/cargo/reference/config.html#buildtarget) environment variable to select the build target.

### `npm test`

Runs the unit tests by calling `cargo test`. You can learn more about [adding tests to your Rust code](https://doc.rust-lang.org/book/ch11-01-writing-tests.html) from the [Rust book](https://doc.rust-lang.org/book/).

## Project Layout

The directory structure of this project is:

```
{{package.name}}/
├── Cargo.toml
├── README.md
{{#if package.isLibrary}}
├── lib/
{{#if package.lang.isTypeScript}}
├── ts/
|   ├── index.mts
|   └── index.cts
{{/if}}
├── platforms/
{{else}}
├── index.node
{{/if}}
├── package.json
├── src/
|   └── lib.rs
└── target/
```

### Cargo.toml

The Cargo [manifest file](https://doc.rust-lang.org/cargo/reference/manifest.html), which informs the `cargo` command.

### README.md

This file.

{{#if package.isLibrary}}
### lib/

{{#if package.lang.isTypeScript}}
The directory containing the generated output from [tsc](https://typescriptlang.org).

### ts/

The directory containing the TypeScript source files.

### ts/index.mts

Entry point for when this library is loaded via [ESM `import`](https://nodejs.org/api/esm.html#modules-ecmascript-modules) syntax.

### ts/index.cts

Entry point for when this library is loaded via [CJS `require`](https://nodejs.org/api/modules.html#requireid).
{{else}}
The directory containing the JavaScript source files.

{{/if}}
### platforms/

The directory containing distributions of the binary addon backend for each platform supported by this library.

{{else}}
### index.node

The Node addon—i.e., a binary Node module—generated by building the project. This is the main module for this package, as dictated by the `"main"` key in `package.json`.

Under the hood, a [Node addon](https://nodejs.org/api/addons.html) is a [dynamically-linked shared object](https://en.wikipedia.org/wiki/Library_(computing)#Shared_libraries). The `"build"` script produces this file by copying it from within the `target/` directory, which is where the Rust build produces the shared object.

{{/if}}
### package.json

The npm [manifest file](https://docs.npmjs.com/cli/v7/configuring-npm/package-json), which informs the `npm` command.

### src/

The directory tree containing the Rust source code for the project.

### src/lib.rs

The Rust library's main module.

### target/

Binary artifacts generated by the Rust build.

## Learn More

To learn more about Neon, see the [Neon documentation](https://neon-bindings.com).

To learn more about Rust, see the [Rust documentation](https://www.rust-lang.org).

To learn more about Node, see the [Node documentation](https://nodejs.org).
